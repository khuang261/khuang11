#Team Lach On (Maddy Andersen, Dean Carey, Kelly Huang, Erin Lee)
#SoftDev -- Rona Ed.
#K14: Form and Function: Flask app to echo user input via HTML
#Due Dec 10 2020

> Request.method gets you the type of method (GET, POST)
> Restricting methods to 'POST' in our app.py file gives us "Method Not Allowed" printed on the response page (even if we change request.args to request.form).
> We initially were unable to test 'POST,' as the form/response only seemed to work with 'GET.' This was because our login.html file automatically defaults to 'GET.'
> To use the 'POST' request, we have to specify 'POST' in our login.html file. (<form action="/auth" method="POST">)

print(app)
    expected output: the name of the app
    actual output: <Flask 'app'>
print(request.method)
    expected output: GET
    actual output: GET
print(request.args)
    expected output: dictionary of the form's keys and values based on query string
    actual output: ImmutableMultiDict([('username', 'hello'), ('sub1', 'Submit')])
print(request.form)
    expected output: ImmutableMultiDict([('username', 'hello'), ('sub1', 'Submit')])
    actual output: ImmutableMultiDict([])
print(request.headers)
    expected output: thought it would print out headers from the browser (as we learned in class)
    actual output: information about the browser like Host, Connection, language, etc.
